import matplotlib.pyplot as plt
import numpy as np

lista1 = []
lista2 = []
lista3 = []
c = 3E8
m = 0.510e6/c**2
h_b= 6.582e-16
h = 4.135e-15
longitudexp1 = 530e-9
longitudexp2 = 621e-9
longitudexp3 = 709e-9

RHS = np.sqrt(2*m*(V0-E))
LHS1 = np.sqrt(2*m*E)*np.tan(np.sqrt(2*m*E)*L/(2*h_b))
LHS2 = -(np.sqrt(2*m*E))/np.tan((np.sqrt(2*m*E)+1e-9)*L/(2*h_b))

for V0 in np.linspace(7,11,100):
    E= np.linspace(0,V0,100000)
    for p in [5,7,9]:
        L = (p+2)*1.34e-10
        RHS=np.sqrt(2*m*(V0-E))
        LHS1 = np.sqrt(2*m*E)*np.tan(np.sqrt(2*m*E)*L/(2*h_b))
        LHS2 = -(np.sqrt(2*m*E))/np.tan((np.sqrt(2*m*E)+1e-9)*L/(2*h_b))

        def f1(E, V0):
            return LHS1-RHS
        def f2(E, V0, eps=1e-10):
            return LHS2-RHS

        f1s = f1(E, V0)
        f2s = f2(E, V0)

        zero_crossings_even = np.where(np.diff(np.sign(f1s)) * (np.abs(f1s[:-1])<3e-5).astype(float))[0]
        zero_crossings_odd = np.where(np.diff(np.sign(f2s)) * (np.abs(f2s[:-1])<3e-5).astype(float))[0]
        zero_crossings = np.sort(np.concatenate([zero_crossings_even, zero_crossings_odd]))
        Es_method1 =  (E[zero_crossings] + E[zero_crossings+1])/2    

        if p == 5:
            deltaE = Es_method1[4]-Es_method1[3]
            lista1.append((((h*c)/deltaE)-longitudexp1)**2)
            #lista1.append((((h*c)/(deltaE)))**2)
        elif p == 7:
            deltaE = Es_method1[5]-Es_method1[4]
            lista2.append((((h*c)/deltaE)-longitudexp2)**2)
            #lista2.append((((h*c)/(deltaE)))**2)
        else:
            deltaE = Es_method1[6]-Es_method1[5]
            lista3.append((((h*c)/deltaE)-longitudexp3)**2)
            #lista3.append((((h*c)/(deltaE)))**2) 
        
        chi2 = []
        
        for i in range(0,100):
    chi2.append(lista1[i]+lista2[i]+lista3[i])
    
    plt.figure(figsize=(6,3))
plt.scatter(np.linspace(7,11,100),chi2, s=1, color='red')
plt.grid(color='grey')
plt.xlabel('$V$ (eV)')
plt.ylabel('$\chi^2$')
plt.show()
plt.savefig('chicuadradomintia')

np.argmin(chi2)

v = np.linspace(7,11,50)

v[11]
        
